CREATE TABLE IF NOT EXISTS clever_chain.customer(
   id uuid,
   customer_name varchar,
   constant_val varchar,
   created_at timestamp,
   updated_at timestamp,
   deleted_at timestamp,
   created_by uuid,
   updated_by uuid,
   deleted_by uuid,
   is_deleted boolean,
   PRIMARY KEY(constant_val,customer_name, id)
   );
---
CREATE TABLE IF NOT EXISTS clever_chain.user(
   id uuid,
   first_name varchar,
   last_name varchar,
   username varchar,
   password varchar,
   enabled varchar,
   customer_id uuid,
   role_name varchar,
   customer_name varchar,
   constant_val varchar,
   created_at timestamp,
   updated_at timestamp,
   deleted_at timestamp,
   created_by uuid,
   updated_by uuid,
   deleted_by uuid,
   is_deleted boolean,
   PRIMARY KEY(constant_val,username, id)
   );
---
CREATE TABLE IF NOT EXISTS clever_chain.job(
   id uuid,
   job_title varchar,
   job_status varchar,
   job_state varchar,
   file_path varchar,
   customer_id uuid,
   error_message varchar,
   total_input_records int,
   customer_type varchar,
   matched_customers int,
   potential_matches int,
   no_matches int,
   completed_time time,
   constant_val varchar,
   started_at timestamp,
   created_at timestamp,
   updated_at timestamp,
   deleted_at timestamp,
   created_by uuid,
   updated_by uuid,
   deleted_by uuid,
   is_deleted boolean,
   PRIMARY KEY(constant_val,started_at,id))
   WITH CLUSTERING ORDER BY (started_at DESC, id DESC);
---
CREATE TABLE IF NOT EXISTS clever_chain.job_entity (
   id uuid,
   constant_val varchar,
   job_id uuid,
   customer_id uuid,
   job_status varchar,
   databases list<text>,
   total_matches int,
   match varchar,
   match_numeric int,
   categories list<text>,
   submitted_timestamp timestamp,
   name varchar,
   data_record text,
   category varchar,
   type varchar,
   entity_type varchar,
   created_at timestamp,
   updated_at timestamp,
   deleted_at timestamp,
   created_by uuid,
   updated_by uuid,
   deleted_by uuid,
   is_deleted boolean,
   PRIMARY KEY(constant_val,match_numeric,id))
   WITH CLUSTERING ORDER BY (match_numeric DESC, id DESC);
---
CREATE TABLE IF NOT EXISTS clever_chain.job_results(
   id uuid,
   job_id uuid,
   job_entity_id uuid,
   customer_id uuid,
   constant_val varchar,
   intermediate_entity_record text,
   intermediate_entity_details text,
   mapped_entity_record text,
   mapped_entity_details text,
   entity_risk_evaluation text,
   entity_attr_risk_evaluation text,
   type varchar,
   entity_type varchar,
   name varchar,
   match varchar,
   match_description text,
   match_numeric int,
   bridger_updated timestamp,
   database varchar,
   category varchar,
   subcategory varchar,
   comments text,
   created_at timestamp,
   updated_at timestamp,
   deleted_at timestamp,
   created_by uuid,
   updated_by uuid,
   deleted_by uuid,
   is_deleted boolean,
   PRIMARY KEY (constant_val, match_numeric, id))
   WITH CLUSTERING ORDER BY (match_numeric DESC, id DESC);
---
CREATE TABLE IF NOT EXISTS clever_chain.tags_mapping(
   id uuid,
   customer_id uuid,
   tag varchar,
   general_tag varchar,
   bridger_tag varchar,
   constant_val varchar,
   created_at timestamp,
   updated_at timestamp,
   deleted_at timestamp,
   created_by uuid,
   updated_by uuid,
   deleted_by uuid,
   is_deleted boolean,
   PRIMARY KEY(constant_val,tag,id)
   );
---
CREATE TABLE IF NOT EXISTS clever_chain.user_activity(
   id uuid,
   user_id uuid,
   constant_val varchar,
   activity_type_id uuid,
   activity_detail text,
   activity_timestamp timestamp,
   activity_type varchar,
   ip_address varchar,
   created_at timestamp,
   updated_at timestamp,
   deleted_at timestamp,
   created_by uuid,
   updated_by uuid,
   deleted_by uuid,
   is_deleted boolean,
   PRIMARY KEY(constant_val, created_at,id)
   );
---
CREATE TABLE IF NOT EXISTS clever_chain.clever_workflow_rules(
   id uuid,
   customer_id uuid,
   rule text,
   version bigint,
   constant_val varchar,
   created_at timestamp,
   updated_at timestamp,
   deleted_at timestamp,
   created_by uuid,
   updated_by uuid,
   deleted_by uuid,
   is_deleted boolean,
   PRIMARY KEY(constant_val, rule,id)
   );
---
CREATE TABLE IF NOT EXISTS clever_chain.filters(
   job_id uuid,
   job_entity_id uuid,
   customer_id uuid,
   type varchar,
   constant_val varchar,
   databases set<text>,
   categories set<text>,
   subcategories set<text>,
   PRIMARY KEY(constant_val, job_entity_id)
   );
